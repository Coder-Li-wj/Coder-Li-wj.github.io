I"<h3 id="自己实现一个_new方法模拟出内置new后的结果">自己实现一个_new方法，模拟出内置new后的结果</h3>
<h5 id="一javascript中new一个对象的过程">一、JavaScript中new一个对象的过程：</h5>
<ol>
  <li>创建一个新对象；</li>
  <li>设置新对象的constructor属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的prototype对象；</li>
  <li>执行构造函数，并把函数中的this指向新对象；</li>
  <li>返回新对象。</li>
</ol>

<h5 id="二封装_new函数">二、封装_new函数</h5>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">_new</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="p">...</span><span class="nx">arg</span><span class="p">){</span><span class="c1">//fn为当前要new的构造函数，...arg为需要给构造函数传递的参数</span>
    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="c1">//让新对象的原型链指向构造函数的原型</span>
    <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">...</span><span class="nx">arg</span><span class="p">)</span><span class="c1">//执行构造函数，并把...arg里面的参数传入，同时改变this指向新对象</span>
    <span class="k">return</span> <span class="nx">obj</span>
<span class="p">}</span>

<span class="c1">// 利用Dog构造函数测试</span>
<span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
<span class="p">}</span>
<span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I am</span><span class="dl">'</span> <span class="o">+</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">test</span> <span class="o">=</span> <span class="nx">_new</span><span class="p">(</span><span class="nx">Dog</span><span class="p">,</span> <span class="dl">'</span><span class="s1">wangcai</span><span class="dl">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET