I"<p>安装：<code class="highlighter-rouge">npm install axios --save</code><br />
基本使用：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nx">axios</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="c1">//可以在method上指定是什么请求，默认是get请求</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>发送并发请求   <code class="highlighter-rouge">axios.all()</code><br />
eg：<code class="highlighter-rouge">axiso.all([axios(), axios()]).then()</code><br />
其中<code class="highlighter-rouge">axios.all()</code>返回的结果是一个数组，可以使用<code class="highlighter-rouge">axios.spread</code>将数组<code class="highlighter-rouge">[res1, res2]</code>展开为<code class="highlighter-rouge">res1,res2</code>，即<code class="highlighter-rouge">.then(axios.spread((res1, res2) =&gt; { } ))</code></p>

<p>创建axios实例：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">instance1</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="na">baseURL</span><span class="p">:</span><span class="dl">'</span><span class="s1">....</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">timeout</span><span class="p">:...,</span>
    <span class="p">...</span>
<span class="p">})</span>
<span class="nx">instance1</span><span class="p">({</span><span class="na">url</span><span class="p">:</span><span class="dl">'</span><span class="s1">...</span><span class="dl">'</span><span class="p">}).</span><span class="nx">then</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>封装axios</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">export</span> <span class="kd">function</span> <span class="nx">request</span><span class="p">(</span><span class="nx">config</span><span class="p">){</span>
    <span class="kd">const</span> <span class="nx">instance</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="c1">//创建axios实例</span>
        <span class="na">baseURL</span><span class="p">:</span><span class="dl">'</span><span class="s1">...</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">timeout</span><span class="p">:...,</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">instance</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="c1">//发送真正的网络请求</span>
<span class="p">}</span>

<span class="c1">//然后在所需地方使用：</span>
<span class="nx">request</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span><span class="dl">'</span><span class="s1">...</span><span class="dl">'</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">().</span><span class="k">catch</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>axios拦截器</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">//请求拦截</span>
<span class="nx">instance</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="p">...</span>
    <span class="k">return</span> <span class="nx">config</span>
<span class="p">},</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>请求拦截的作用：</p>
<ol>
  <li>config中的一些信息不符合服务器时修改</li>
  <li>每次发送网络请求时，都希望在界面中显示一个请求图标</li>
  <li>某些网络请求（比如登录（token）），必须携带一些特殊信息</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">//响应拦截</span>
<span class="nx">instance</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="p">...</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span>
<span class="p">},</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET